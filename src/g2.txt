program statement_list statement_list_r statement simple_statement combo_statement declaration declaration_list assignment io_statement if_statement while_loop for_loop for_in_loop type_singular identifier_list type_plural expression read_statement write_statement expression_list condition term factor logical_expression logical_operator relation
do { } . let identifier be a , string number vector of strings numbers vectors read write if then else while for from to down up in + - * / ( ) [ ] length const_number < <= = != >= > and or
program
program -> statement_list
statement_list -> do { statement_list_r }
statement_list_r -> statement
statement_list_r -> statement_list_r statement
statement -> simple_statement
statement -> combo_statement
simple_statement -> declaration .
simple_statement -> declaration_list .
simple_statement -> assignment .
simple_statement -> io_statement .
combo_statement -> if_statement .
combo_statement -> while_loop .
combo_statement -> for_loop .
combo_statement -> for_in_loop .
declaration -> let identifier be a type_singular
declaration_list -> let identifier_list be type_plural
identifier_list -> identifier
identifier_list -> identifier , identifier_list
type_singular -> string
type_singular -> number
type_singular -> vector of type_plural
type_plural -> strings
type_plural -> numbers
type_plural -> vectors of type_plural
assignment -> let identifier be expression
io_statement -> read_statement
io_statement -> write_statement
read_statement -> read identifier_list
write_statement -> write expression_list
expression_list -> expression
expression_list -> expression , expression_list
if_statement -> if condition then statement_list
if_statement -> if condition then statement_list else if condition then statement_list
if_statement -> if condition then statement_list else if condition then statement_list else statement_list
while_loop -> while condition statement_list
for_loop -> for identifier from expression to expression statement_list
for_loop -> for identifier from expression down to expression statement_list
for_loop -> for identifier from expression up to expression statement_list
for_in_loop -> for identifier in identifier
for_in_loop -> for identifier , identifier in identifier
expression -> term
expression -> expression + term
expression -> expression - term
term -> factor
term -> term * factor
term -> term / factor
factor -> ( expression )
factor -> identifier [ expression ]
factor -> length of identifier
factor -> const_number
condition -> logical_expression
condition -> condition logical_operator condition
condition -> ( condition logical_operator condition )
logical_expression -> expression relation expression
relation -> <
relation -> <=
relation -> =
relation -> !=
relation -> >=
relation -> >
logical_operator -> and
logical_operator -> or